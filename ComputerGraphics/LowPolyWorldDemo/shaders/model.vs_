#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

uniform Mat
{
	vec4 aAmbient;
	vec4 aDiffuse;
	vec4 aSpecular;
	float aShininess;
};
out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;
out vec4 FragPosLightSpace;


out vec4 Ambient;
out vec4 Diffuse;
out vec4 Specular;
out float shininess;
 
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 lightSpaceMatrix;
 
void main()
{
    FragPos = vec3( model * vec4(aPos, 1.0));
	Normal = mat3(transpose(inverse(model))) * aNormal;

	TexCoords = aTexCoords;
	FragPosLightSpace = lightSpaceMatrix * vec4(FragPos, 1.0);

	Ambient = aAmbient;
	Diffuse = aDiffuse;
	Specular = aSpecular;
	shininess = aShininess;
	
    gl_Position = projection * view * vec4(FragPos, 1.0);
}